name: CI/CD - Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧅 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🔍 Cache bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 🧪 Run unit tests
        run: bun test
        
      - name: 📊 Generate test coverage
        run: bun test --coverage --coverage-reporter=lcov --coverage-reporter=text
        continue-on-error: true
        
      - name: 📈 Upload coverage reports
        uses: codecov/codecov-action@v4
        if: github.event_name == 'pull_request'
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
        continue-on-error: true

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🧅 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: bun run lint
        continue-on-error: true
        if: hashFiles('.eslintrc*', 'eslint.config.*') != ''

      - name: 💅 Check code formatting
        run: bun run format:check
        continue-on-error: true
        if: hashFiles('.prettierrc*', 'prettier.config.*') != ''

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🧅 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build application
        run: |
          echo "✅ Static files check"
          test -f index.html || (echo "❌ index.html missing" && exit 1)
          test -f script.js || (echo "❌ script.js missing" && exit 1)
          test -f style.css || (echo "❌ style.css missing" && exit 1)
          echo "✅ All required files present"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, lint-and-format, build-check]
    if: always()
    
    steps:
      - name: ✅ Verify all jobs succeeded
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "❌ One or more required checks failed!"
          echo "Test: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint-and-format.result }}"
          echo "Build: ${{ needs.build-check.result }}"
          exit 1
          
      - name: 🎉 All checks passed!
        run: |
          echo "✅ All required checks passed successfully!"
          echo "Test: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint-and-format.result }}"
          echo "Build: ${{ needs.build-check.result }}"