name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 🛎️ Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🧅 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🧪 Run tests with PR context
        run: |
          echo "🔍 Running tests for PR #${{ github.event.number }}"
          echo "📝 PR Title: ${{ github.event.pull_request.title }}"
          echo "👤 Author: ${{ github.event.pull_request.user.login }}"
          echo "🌿 Branch: ${{ github.event.pull_request.head.ref }}"
          echo ""
          bun test --reporter=verbose

      - name: 📋 PR Test Summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const testStatus = '${{ job.status }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
            const commentBody = `## 🧪 Test Results

            **Status:** ${testStatus}

            **PR Details:**
            - 📝 Title: ${{ github.event.pull_request.title }}
            - 🌿 Branch: \`${{ github.event.pull_request.head.ref }}\`
            - 📊 Commit: \`${{ github.event.pull_request.head.sha }}\`

            ${testStatus === '✅ PASSED' ? 
              '🎉 All tests passed! This PR is ready for review.' : 
              '⚠️  Tests failed. Please fix the issues before merging.'}

            ---
            *This comment was automatically generated by GitHub Actions*`;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('🧪 Test Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }